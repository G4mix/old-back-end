type User {
    id: Int!
    username: String!
    email: String!
    icon: String
    socialAccounts: [SocialAccount]
    passwordUser: PasswordUser
}

type PasswordUser {
    id: Int!
    user: User!
    verifiedEmail: Boolean
}

type SocialAccount {
    id: Int!
    user: User!
    provider: String!
    socialAccountId: String!
}

type Query {
    findAllUsers(skip: Int = 0, limit: Int = 10): [User]
    findUserByUsername(username: String!): User
    findUserByEmail(email: String!): User
    findUserByToken: User
}

type Mutation {
    signUpPasswordUser(input: SignUpPasswordUserInput!): AuthTokens
    signInPasswordUser(input: SignInPasswordUserInput!): AuthTokens
    signOutPasswordUser(input: SignOutPasswordUserInput!): Boolean
    refreshTokenPasswodUser(refreshToken: String!): AuthTokens
    updateUser(id: Int!, userInput: PartialUserInput!): User
    deleteAccount(id: Int!): Boolean
}

input SignUpPasswordUserInput {
    username: String!
    email: String!
    password: String!
}

input SignInPasswordUserInput {
    username: String
    email: String
    password: String!
    rememberMe: Boolean!
}

input SignOutPasswordUserInput {
    accessToken: String!
    refreshToken: String!
}

input PartialUserInput {
    username: String
    email: String
    icon: String
}

type AuthTokens {
    accessToken: String!
    refreshToken: String!
}