type User {
    id: Int!
    username: String!
    email: String!
    icon: String
    socialAccounts: [SocialAccount]
}

type UserPassword implements User {
    id: Int!
    username: String!
    email: String!
    icon: String
    socialAccounts: [SocialAccount]
    password: String!
    verifiedEmail: String!
}

type SocialAccount {
    id: Int!
    provider: String!
    socialAccountId: String!
}

type UserSocialAccount {
    user: User!
    socialAccount: SocialAccount!
}

type Query {
    users: [User]
    user(email: String!): User
    socialAccount(userId: ID!): SocialAccount
}

type Mutation {
    updateUser(id: ID!, userInput: UserInput): User
    deleteAccount(id: ID!): Boolean
    authenticate(password: String!): Boolean
    checkEmail(email: String!): Boolean
    changeEmail(email: String!): EmailUpdateResponse
    changePassword(changePasswordInput: ChangePasswordInput): PasswordUpdateResponse
    socialAuthentication(): Boolean
    deleteSocialAccount(): Boolean
}

type PasswordUpdateResponse {
    success: Boolean!
    message: String
}

type EmailUpdateResponse {
    success: Boolean!
    email: String
}

input UserInput {
    name: String
    icon: String
}

input ChangePasswordInput {
    currentPassword: String!
    newPassword: String!
}
