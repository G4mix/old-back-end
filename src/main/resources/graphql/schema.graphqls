scalar Upload

type User {
    id: Int!
    username: String!
    email: String!
    icon: String
    passwordUser: PasswordUser
    userProfile: UserProfile
}

type PasswordUser {
    id: Int!
    user: User!
    verifiedEmail: Boolean
}

type Link {
    id: Int!
    link: String!
    post: Post
}

type Comment {
    id: Int!
    post: Post!
    content: String!
    likesCount: Int!
    author: UserProfile
    replies: [Comment]
    parentComment: Comment
    createdAt: String!
    updatedAt: String
    isLiked: Boolean!
}

type Tag {
    id: Int!
    name: String!
    post: Post
}

type Image {
    id: Int!
    post: Post!
    name: String!
    src: String!
    width: Int!
    height: Int!
}

type Post {
    id: Int!
    author: UserProfile!
    title: String!
    content: String!
    createdAt: String!
    updatedAt: String
    links: [Link]!
    tags: [Tag]!
    images: [Image]!
    comments: [Comment]!
    likesCount: Int
    commentsCount: Int
    viewsCount: Int
    isLiked: Boolean
}

type UserProfile {
    id: Int!
    user: User!
    displayName: String
    posts: [Post]
}

type Query {
    # user class
    findAllUsers(skip: Int = 0, limit: Int = 10): [User]
    findUserByUsername(username: String!): User
    findUserByEmail(email: String!): User
    findUserByToken: User

    # post class
    findAllPosts(skip: Int = 0, limit: Int = 10): [Post]
    findPostById(id: Int!): Post
    findPostByTitle(title: String): Post

    # comment class
    findAllCommentsOfAPost(postId: Int!, skip: Int = 0, limit: Int = 10): [Comment]
}

type Mutation {
    # user class
    updateUser(input: PartialUserInput!): User
    deleteAccount: Boolean

    # post class
    createPost(input: PartialPostInput!, images: [Upload]): Post
    updatePost(postId: Int!, input: PartialPostInput!, images: [Upload]): Post
    deletePost(postId: Int!): Boolean

    # like class
    likePost(postId: Int!, isLiked: Boolean!): Boolean
    likeComment(commentId: Int!, isLiked: Boolean!): Boolean

    # comment class
    commentPost(postId: Int!, content: String!): Comment
    replyComment(commentId: Int!, content: String!): Comment
}

input PartialUserInput {
    username: String
    icon: String
}

input PartialPostInput {
    title: String
    content: String
    links: [String]
    tags: [String]
}