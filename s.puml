@startuml gamix

actor User

User -> AuthController: signUpPasswordUser(UserInput)
AuthController -> AuthService: signUpPasswordUser(UserInput)
AuthService -> UserRepository: findByEmail(email)
UserRepository --> AuthService: User
AuthService --> UserRepository: createUser(UserInput)
UserRepository --> AuthService: User
AuthService -> PasswordUserRepository: save(PasswordUser)
PasswordUserRepository --> AuthService: PasswordUser
AuthService --> AuthController: PasswordUser

User -> AuthController: signInPasswordUser(username, password)
AuthController -> AuthService: signInWithUsername(username, password)
AuthService -> UserRepository: findByUsername(username)
UserRepository --> AuthService: User
AuthService -> JwtValidator: validate(token)
JwtValidator --> AuthService: boolean
AuthService -> JwtGenerator: generate(passwordUser)
JwtGenerator --> AuthService: token
AuthService -> PasswordUserRepository: save(PasswordUser)
PasswordUserRepository --> AuthService: PasswordUser
AuthService --> AuthController: PasswordUser

User -> AuthController: signOutPasswordUser(username)
AuthController -> AuthService: signOutPasswordUser(username)
AuthService -> UserRepository: findByUsername(username)
UserRepository --> AuthService: User
AuthService -> JwtValidator: invalidate(token)
JwtValidator --> AuthService: newToken
AuthService -> PasswordUserRepository: save(PasswordUser)
PasswordUserRepository --> AuthService: PasswordUser
AuthService --> AuthController: Success

User -> UserController: findAllUsers(skip, limit)
UserController -> UserService: findAllUsers(skip, limit)
UserService -> UserRepository: findAll(Pageable)
UserRepository --> UserService: List<User>
UserService --> UserController: List<User>

User -> UserController: findUserByEmail(email)
UserController -> UserService: findUserByEmail(email)
UserService -> UserRepository: findByEmail(email)
UserRepository --> UserService: User
UserService --> UserController: User

User -> UserController: updateUser(id, userInput)
UserController -> UserService: updateUser(id, userInput)
UserService -> UserRepository: findById(id)
UserRepository --> UserService: Optional<User>
UserService -> UserRepository: save(user)
UserRepository --> UserService: User
UserService --> UserController: User

User -> UserController: deleteAccount(id)
UserController -> UserService: deleteAccount(id)
UserService -> UserRepository: existsById(id)
UserRepository --> UserService: boolean
UserService -> UserRepository: deleteById(id)

@enduml
